name: Deploy frontend

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-frontend
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # mark job start to compute duration later
      - name: Start timer
        id: t0
        run: echo "start=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail
            cd ~/vparu-prod/sauna-frontend
            docker compose down || true
            git fetch --all
            git checkout main || git checkout -b main
            git pull origin main
            docker compose up --build -d
            docker system prune -f || true

      # pull a short image-size summary from the server (best-effort)
      - name: Gather Docker image sizes (SSH)
        id: imgs
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y sshpass >/dev/null
          # Try to list sizes; if anything fails, leave summary empty
          OUT="$(sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" \
                'cd ~/vparu-prod/sauna-frontend && docker compose images --format "{{.Service}} — {{.Size}}" 2>/dev/null | head -n 6' || true)"
          # Escape for Telegram HTML
          OUT_ESCAPED="$(printf "%s" "$OUT" | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g')"
          echo "summary=${OUT_ESCAPED}" >> $GITHUB_OUTPUT

      - name: Notify Telegram (HTML)
        if: ${{ always() }}
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          START_TS: ${{ steps.t0.outputs.start }}
          IMG_SUMMARY: ${{ steps.imgs.outputs.summary }}
          STATUS: ${{ job.status }}   # success | failure | cancelled
        run: |
          set -euo pipefail
          END_TS="$(date +%s)"
          DUR=$(( END_TS - START_TS ))
          H=$(( DUR/3600 )); M=$(( (DUR%3600)/60 )); S=$(( DUR%60 ))
          printf -v D_HMS '%02d:%02d:%02d' "$H" "$M" "$S"
          SHORT_SHA="${SHA::7}"

          if [ "$STATUS" = "success" ]; then
            ICON="✅"; TITLE="Деплой выполнен успешно"
          elif [ "$STATUS" = "cancelled" ]; then
            ICON="⚠️"; TITLE="Деплой отменён"
          else
            ICON="❌"; TITLE="Сбой деплоя"
          fi

          if [ -z "${IMG_SUMMARY:-}" ]; then
            IMG_BLOCK="<i>Размеры образов недоступны</i>"
          else
            IMG_BLOCK="<pre>${IMG_SUMMARY}</pre>"
          fi

          TEXT="$ICON <b>$TITLE</b>\n
                <b>Проект:</b> <code>$REPO</code>\n
                <b>Ветка:</b> <code>$REF</code>\n
                <b>Коммит:</b> <code>$SHORT_SHA</code>\n
                <b>Длительность:</b> <code>$D_HMS</code>\n
                <b>Образы Docker:</b>\n${IMG_BLOCK}\n
                <b>Логи:</b> <a href=\"$RUN_URL\">запуск GitHub Actions</a>\n
                <i>Автоматизированное развертывание через GitHub Actions и Docker Compose завершено. Система уведомлений работает в штатном режиме.</i>"

          curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            -d text="$TEXT" \
            -d parse_mode="HTML" \
            -d disable_web_page_preview=true
